{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleDate","e","setState","target","value","handleText","handleCheckbox","handleClick","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","console","log","toLowerCase","activeTasks","map","components_Task","key","doneTasks","Fragment","fontSize","App","counter","deleteTask","Object","toConsumableArray","index","findIndex","splice","changeTaskStatus","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRA0EeA,0NAtEbC,SAAU,IAAIC,MAAOC,cAAcC,MAAM,EAAG,MAC5CC,MAAQ,CACNC,KAAM,GACNC,SAAS,EACTC,KAAMC,EAAKR,WAEbS,WAAa,SAAAC,GACXF,EAAKG,SAAS,CACZJ,KAAMG,EAAEE,OAAOC,WAGnBC,WAAa,SAAAJ,GACXF,EAAKG,SAAS,CACZN,KAAMK,EAAEE,OAAOC,WAGnBE,eAAiB,SAAAL,GACfF,EAAKG,SAAS,CACZL,QAASI,EAAEE,OAAON,aAGtBU,YAAc,SAAAN,GAAK,IAAAO,EACeT,EAAKJ,MAA7BC,EADSY,EACTZ,KAAMC,EADGW,EACHX,QAASC,EADNU,EACMV,KACnBF,EAAKa,OAAS,EACJV,EAAKW,MAAMC,IAAIf,EAAME,EAAMD,IAErCE,EAAKG,SAAS,CACZN,KAAM,GACNC,SAAS,EACTC,KAAMC,EAAKR,UAIfqB,MAAM,+FAIR,IAAIC,EAAqC,EAA3BC,KAAKvB,QAAQG,MAAM,EAAG,GAAS,EAE7C,OADAmB,GAAoB,SAElBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,YAAY,gBACZhB,MAAOU,KAAKnB,MAAMC,KAClByB,SAAUP,KAAKT,aAEjBU,EAAAC,EAAAC,cAAA,SACEE,KAAK,WACLtB,QAASiB,KAAKnB,MAAME,QACpByB,GAAG,YACHD,SAAUP,KAAKR,iBAEjBS,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,aAAf,aACAR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,QAAf,yBACAR,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLf,MAAOU,KAAKnB,MAAMG,KAClB0B,IAAKV,KAAKnB,MAAMJ,QAChBkC,IAAKZ,EACLQ,SAAUP,KAAKd,aAEjBe,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQS,QAASZ,KAAKP,aAAtB,iBAjEcoB,cC8BPC,EA/BF,SAAAlB,GACX,IADoBmB,EAKsCnB,EAAMoB,KAAxDlC,EALYiC,EAKZjC,KAAME,EALM+B,EAKN/B,KAAMwB,EALAO,EAKAP,GAAIS,EALJF,EAKIE,OAAQC,EALZH,EAKYG,UAAWC,EALvBJ,EAKuBI,WAC3C,GAAIF,EACF,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,UAAQiB,MAAOF,EATT,CACZG,MAAO,OAQkC,MAAOvC,GAD5C,SACiEE,EAAM,IACrEiB,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMhB,EAAM0B,OAAOd,KAApC,yBACAP,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMhB,EAAM2B,OAAOf,KAApC,OAKN,IAAMgB,EAAS,IAAI9C,KAAKyC,GAAYM,iBACpC,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,cAASrB,EAAT,KACAmB,EAAAC,EAAAC,cAAA,6BAAgBnB,EAAhB,KACAiB,EAAAC,EAAAC,cAAA,WAHF,6BAGkCF,EAAAC,EAAAC,cAAA,YAAOqB,EAAP,KAChCvB,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMhB,EAAM2B,OAAOf,KAApC,QCyCKkB,EAhEE,SAAA9B,GACf,IAAMqB,EAASrB,EAAM+B,MAAMC,OAAO,SAAAZ,GAAI,OAAoB,IAAhBA,EAAKC,SACzCY,EAAOjC,EAAM+B,MAAMC,OAAO,SAAAZ,GAAI,OAAoB,IAAhBA,EAAKC,SAGzCY,EAAKlC,QAAU,GACjBkC,EAAKC,KAAK,SAAC5B,EAAG6B,GACZ,OAAI7B,EAAEiB,WAAaY,EAAEZ,WAAmB,EACpCjB,EAAEiB,WAAaY,EAAEZ,YAAoB,EAClC,IAGXa,QAAQC,IAAIhB,GACRA,EAAOtB,QAAU,GACnBsB,EAAOa,KAAK,SAAC5B,EAAG6B,GAGd,OAFA7B,EAAIA,EAAEpB,KAAKoD,gBACXH,EAAIA,EAAEjD,KAAKoD,gBACQ,EACfhC,EAAI6B,EAAU,EACX,IAGXC,QAAQC,IAAIhB,GAEZ,IAAMkB,EAAclB,EAAOmB,IAAI,SAAApB,GAAI,OACjCf,EAAAC,EAAAC,cAACkC,EAAD,CACEC,IAAKtB,EAAKR,GACVQ,KAAMA,EACNO,OAAQ3B,EAAM2B,OACdD,OAAQ1B,EAAM0B,WAIZiB,EAAYV,EAAKO,IAAI,SAAApB,GAAI,OAC7Bf,EAAAC,EAAAC,cAACkC,EAAD,CACEC,IAAKtB,EAAKR,GACVQ,KAAMA,EACNO,OAAQ3B,EAAM2B,OACdD,OAAQ1B,EAAM0B,WAIlB,OACErB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsC,SAAA,KACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,kCACCgC,EAAYxC,OAAS,EAAIwC,EAAclC,EAAAC,EAAAC,cAAA,2CAE1CF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,oCACoBF,EAAAC,EAAAC,cAAA,cAAM0B,EAAKlC,OAAX,MAEnBkC,EAAKlC,OAAS,GACbM,EAAAC,EAAAC,cAAA,QAAMiB,MAAO,CAAEqB,SAAU,KAAzB,0DAIDF,EAAU3D,MAAM,EAAG,MCGb8D,6MA1DbC,QAAU,IACV9D,MAAQ,CACN8C,MAAO,MAGTiB,WAAa,SAAApC,GACX,IAAMmB,EAAKkB,OAAAC,EAAA,EAAAD,CAAO5D,EAAKJ,MAAM8C,OACvBoB,EAAQpB,EAAMqB,UAAU,SAAAhC,GAAI,OAAIA,EAAKR,KAAOA,IAClDmB,EAAMsB,OAAOF,EAAO,GACpB9D,EAAKG,SAAS,CACZuC,aAIJuB,iBAAmB,SAAA1C,GACjB,IAAMmB,EAAKkB,OAAAC,EAAA,EAAAD,CAAO5D,EAAKJ,MAAM8C,OAC7BA,EAAMwB,QAAQ,SAAAnC,GACRA,EAAKR,KAAOA,IACdQ,EAAKC,QAAS,EACdD,EAAKG,YAAa,IAAIzC,MAAO0E,aAGjCnE,EAAKG,SAAS,CACZuC,aAIJ0B,QAAU,SAACvE,EAAME,EAAMkC,GACrB,IAAMF,EAAO,CACXR,GAAIvB,EAAK0D,QACT7D,KAAMA,EACNE,KAAMA,EACNkC,UAAWA,EACXD,QAAQ,EACRE,WAAY,MAMd,OAJAlC,EAAK0D,UACL1D,EAAKG,SAAS,SAAAkE,GAAS,MAAK,CAC1B3B,MAAK,GAAA4B,OAAAV,OAAAC,EAAA,EAAAD,CAAMS,EAAU3B,OAAhB,CAAuBX,QAEvB,2EAIP,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACqD,EAAD,CAAS3D,IAAKG,KAAKqD,UACnBpD,EAAAC,EAAAC,cAACsD,EAAD,CACE9B,MAAO3B,KAAKnB,MAAM8C,MAClBJ,OAAQvB,KAAK4C,WACbtB,OAAQtB,KAAKkD,2BApDLrC,aCOE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.df575eb0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate\r\n  };\r\n  handleDate = e => {\r\n    this.setState({\r\n      date: e.target.value\r\n    });\r\n  };\r\n  handleText = e => {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  };\r\n  handleCheckbox = e => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    });\r\n  };\r\n  handleClick = e => {\r\n    const { text, checked, date } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: \"\",\r\n          checked: false,\r\n          date: this.minDate\r\n        });\r\n      }\r\n    } else {\r\n      alert(\"Za krótka nazwa\");\r\n    }\r\n  };\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n    return (\r\n      <div className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Dodaj zadanie\"\r\n          value={this.state.text}\r\n          onChange={this.handleText}\r\n        />\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={this.state.checked}\r\n          id=\"important\"\r\n          onChange={this.handleCheckbox}\r\n        />\r\n        <label htmlFor=\"important\">Priorytet</label>\r\n        <br />\r\n        <label htmlFor=\"date\">Do kiedy zrobić </label>\r\n        <input\r\n          type=\"date\"\r\n          value={this.state.date}\r\n          min={this.state.minDate}\r\n          max={maxDate}\r\n          onChange={this.handleDate}\r\n        />\r\n        <br />\r\n        <button onClick={this.handleClick}>Dodaj</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = props => {\r\n  const style = {\r\n    color: \"red\"\r\n  };\r\n\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> - do {date}{\" \"}\r\n          <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text} </strong>\r\n          <em>zrobić do ({date})</em>\r\n          <br />- potwierdzenie wykonania <span>{finish} </span>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = props => {\r\n  const active = props.tasks.filter(task => task.active === true);\r\n  const done = props.tasks.filter(task => task.active === false);\r\n\r\n  // done.sort((a, b) => b.finishDate - a.finishDate);\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      if (a.finishDate < b.finishDate) return 1;\r\n      if (a.finishDate > b.finishDate) return -1;\r\n      return 0;\r\n    });\r\n  }\r\n  console.log(active);\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0;\r\n    });\r\n  }\r\n  console.log(active);\r\n\r\n  const activeTasks = active.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  const doneTasks = done.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n        <h1>Zadania do zrobienia</h1>\r\n        {activeTasks.length > 0 ? activeTasks : <p>Brak zadań do wykonania!</p>}\r\n      </div>\r\n      <hr />\r\n      <div className=\"done\">\r\n        <h2>\r\n          Zadania ukończone <em>({done.length})</em>\r\n        </h2>\r\n        {done.length > 5 && (\r\n          <span style={{ fontSize: 10 }}>\r\n            Wyświetlonych jest jedynie 5 ostatnich zadań\r\n          </span>\r\n        )}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport AddTask from \"./AddTask\";\r\nimport TaskList from \"./TaskList\";\r\n\r\nclass App extends Component {\r\n  counter = 4;\r\n  state = {\r\n    tasks: []\r\n  };\r\n\r\n  deleteTask = id => {\r\n    const tasks = [...this.state.tasks];\r\n    const index = tasks.findIndex(task => task.id === id);\r\n    tasks.splice(index, 1);\r\n    this.setState({\r\n      tasks\r\n    });\r\n  };\r\n\r\n  changeTaskStatus = id => {\r\n    const tasks = [...this.state.tasks];\r\n    tasks.forEach(task => {\r\n      if (task.id === id) {\r\n        task.active = false;\r\n        task.finishDate = new Date().getTime();\r\n      }\r\n    });\r\n    this.setState({\r\n      tasks\r\n    });\r\n  };\r\n\r\n  addTask = (text, date, important) => {\r\n    const task = {\r\n      id: this.counter,\r\n      text: text,\r\n      date: date,\r\n      important: important,\r\n      active: true,\r\n      finishDate: null\r\n    };\r\n    this.counter++;\r\n    this.setState(prevState => ({\r\n      tasks: [...prevState.tasks, task]\r\n    }));\r\n    return true;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>TODO LIST</h1>\r\n        <AddTask add={this.addTask} />\r\n        <TaskList\r\n          tasks={this.state.tasks}\r\n          delete={this.deleteTask}\r\n          change={this.changeTaskStatus}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}